// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darknetserver.proto

#include "darknetserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace darknetServer {
class KeyFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyFrame>
      _instance;
} _KeyFrame_default_instance_;
class DetectedObjects_boxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectedObjects_box>
      _instance;
} _DetectedObjects_box_default_instance_;
class DetectedObjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectedObjects>
      _instance;
} _DetectedObjects_default_instance_;
}  // namespace darknetServer
namespace protobuf_darknetserver_2eproto {
void InitDefaultsKeyFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::darknetServer::_KeyFrame_default_instance_;
    new (ptr) ::darknetServer::KeyFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::darknetServer::KeyFrame::InitAsDefaultInstance();
}

void InitDefaultsKeyFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyFrameImpl);
}

void InitDefaultsDetectedObjects_boxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::darknetServer::_DetectedObjects_box_default_instance_;
    new (ptr) ::darknetServer::DetectedObjects_box();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::darknetServer::DetectedObjects_box::InitAsDefaultInstance();
}

void InitDefaultsDetectedObjects_box() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectedObjects_boxImpl);
}

void InitDefaultsDetectedObjectsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_darknetserver_2eproto::InitDefaultsDetectedObjects_box();
  {
    void* ptr = &::darknetServer::_DetectedObjects_default_instance_;
    new (ptr) ::darknetServer::DetectedObjects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::darknetServer::DetectedObjects::InitAsDefaultInstance();
}

void InitDefaultsDetectedObjects() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDetectedObjectsImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::KeyFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::KeyFrame, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::KeyFrame, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::KeyFrame, numchannels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::KeyFrame, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects_box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects_box, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects_box, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects_box, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects_box, h_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, objectness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::darknetServer::DetectedObjects, sort_class_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::darknetServer::KeyFrame)},
  { 9, -1, sizeof(::darknetServer::DetectedObjects_box)},
  { 18, -1, sizeof(::darknetServer::DetectedObjects)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::darknetServer::_KeyFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::darknetServer::_DetectedObjects_box_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::darknetServer::_DetectedObjects_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "darknetserver.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023darknetserver.proto\022\rdarknetServer\"L\n\010"
      "KeyFrame\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022"
      "\023\n\013numChannels\030\003 \001(\005\022\014\n\004data\030\004 \003(\002\"\313\001\n\017D"
      "etectedObjects\0220\n\004bbox\030\001 \001(\0132\".darknetSe"
      "rver.DetectedObjects.box\022\017\n\007classes\030\002 \001("
      "\005\022\014\n\004prob\030\003 \003(\002\022\014\n\004mask\030\004 \003(\002\022\022\n\nobjectn"
      "ess\030\005 \001(\002\022\022\n\nsort_class\030\006 \001(\005\0321\n\003box\022\t\n\001"
      "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001w\030\003 \001(\002\022\t\n\001h\030\004 \001(\002"
      "2_\n\016ImageDetection\022M\n\020RequestDetection\022\027"
      ".darknetServer.KeyFrame\032\036.darknetServer."
      "DetectedObjects\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "darknetserver.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_darknetserver_2eproto
namespace darknetServer {

// ===================================================================

void KeyFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyFrame::kWidthFieldNumber;
const int KeyFrame::kHeightFieldNumber;
const int KeyFrame::kNumChannelsFieldNumber;
const int KeyFrame::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyFrame::KeyFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_darknetserver_2eproto::InitDefaultsKeyFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknetServer.KeyFrame)
}
KeyFrame::KeyFrame(const KeyFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&numchannels_) -
    reinterpret_cast<char*>(&width_)) + sizeof(numchannels_));
  // @@protoc_insertion_point(copy_constructor:darknetServer.KeyFrame)
}

void KeyFrame::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numchannels_) -
      reinterpret_cast<char*>(&width_)) + sizeof(numchannels_));
  _cached_size_ = 0;
}

KeyFrame::~KeyFrame() {
  // @@protoc_insertion_point(destructor:darknetServer.KeyFrame)
  SharedDtor();
}

void KeyFrame::SharedDtor() {
}

void KeyFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyFrame::descriptor() {
  ::protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyFrame& KeyFrame::default_instance() {
  ::protobuf_darknetserver_2eproto::InitDefaultsKeyFrame();
  return *internal_default_instance();
}

KeyFrame* KeyFrame::New(::google::protobuf::Arena* arena) const {
  KeyFrame* n = new KeyFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:darknetServer.KeyFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numchannels_) -
      reinterpret_cast<char*>(&width_)) + sizeof(numchannels_));
  _internal_metadata_.Clear();
}

bool KeyFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknetServer.KeyFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 numChannels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numchannels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknetServer.KeyFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknetServer.KeyFrame)
  return false;
#undef DO_
}

void KeyFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknetServer.KeyFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 numChannels = 3;
  if (this->numchannels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numchannels(), output);
  }

  // repeated float data = 4;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknetServer.KeyFrame)
}

::google::protobuf::uint8* KeyFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknetServer.KeyFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // int32 numChannels = 3;
  if (this->numchannels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numchannels(), target);
  }

  // repeated float data = 4;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknetServer.KeyFrame)
  return target;
}

size_t KeyFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknetServer.KeyFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 numChannels = 3;
  if (this->numchannels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numchannels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknetServer.KeyFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknetServer.KeyFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknetServer.KeyFrame)
    MergeFrom(*source);
  }
}

void KeyFrame::MergeFrom(const KeyFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknetServer.KeyFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.numchannels() != 0) {
    set_numchannels(from.numchannels());
  }
}

void KeyFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknetServer.KeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyFrame::CopyFrom(const KeyFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknetServer.KeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyFrame::IsInitialized() const {
  return true;
}

void KeyFrame::Swap(KeyFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyFrame::InternalSwap(KeyFrame* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(numchannels_, other->numchannels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyFrame::GetMetadata() const {
  protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectedObjects_box::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedObjects_box::kXFieldNumber;
const int DetectedObjects_box::kYFieldNumber;
const int DetectedObjects_box::kWFieldNumber;
const int DetectedObjects_box::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedObjects_box::DetectedObjects_box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_darknetserver_2eproto::InitDefaultsDetectedObjects_box();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknetServer.DetectedObjects.box)
}
DetectedObjects_box::DetectedObjects_box(const DetectedObjects_box& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:darknetServer.DetectedObjects.box)
}

void DetectedObjects_box::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
  _cached_size_ = 0;
}

DetectedObjects_box::~DetectedObjects_box() {
  // @@protoc_insertion_point(destructor:darknetServer.DetectedObjects.box)
  SharedDtor();
}

void DetectedObjects_box::SharedDtor() {
}

void DetectedObjects_box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedObjects_box::descriptor() {
  ::protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedObjects_box& DetectedObjects_box::default_instance() {
  ::protobuf_darknetserver_2eproto::InitDefaultsDetectedObjects_box();
  return *internal_default_instance();
}

DetectedObjects_box* DetectedObjects_box::New(::google::protobuf::Arena* arena) const {
  DetectedObjects_box* n = new DetectedObjects_box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedObjects_box::Clear() {
// @@protoc_insertion_point(message_clear_start:darknetServer.DetectedObjects.box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
  _internal_metadata_.Clear();
}

bool DetectedObjects_box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknetServer.DetectedObjects.box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float h = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknetServer.DetectedObjects.box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknetServer.DetectedObjects.box)
  return false;
#undef DO_
}

void DetectedObjects_box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknetServer.DetectedObjects.box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float w = 3;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w(), output);
  }

  // float h = 4;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknetServer.DetectedObjects.box)
}

::google::protobuf::uint8* DetectedObjects_box::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknetServer.DetectedObjects.box)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float w = 3;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w(), target);
  }

  // float h = 4;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknetServer.DetectedObjects.box)
  return target;
}

size_t DetectedObjects_box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknetServer.DetectedObjects.box)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float w = 3;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  // float h = 4;
  if (this->h() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedObjects_box::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknetServer.DetectedObjects.box)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedObjects_box* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedObjects_box>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknetServer.DetectedObjects.box)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknetServer.DetectedObjects.box)
    MergeFrom(*source);
  }
}

void DetectedObjects_box::MergeFrom(const DetectedObjects_box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknetServer.DetectedObjects.box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
}

void DetectedObjects_box::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknetServer.DetectedObjects.box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedObjects_box::CopyFrom(const DetectedObjects_box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknetServer.DetectedObjects.box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedObjects_box::IsInitialized() const {
  return true;
}

void DetectedObjects_box::Swap(DetectedObjects_box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedObjects_box::InternalSwap(DetectedObjects_box* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedObjects_box::GetMetadata() const {
  protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectedObjects::InitAsDefaultInstance() {
  ::darknetServer::_DetectedObjects_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::darknetServer::DetectedObjects_box*>(
      ::darknetServer::DetectedObjects_box::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedObjects::kBboxFieldNumber;
const int DetectedObjects::kClassesFieldNumber;
const int DetectedObjects::kProbFieldNumber;
const int DetectedObjects::kMaskFieldNumber;
const int DetectedObjects::kObjectnessFieldNumber;
const int DetectedObjects::kSortClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedObjects::DetectedObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_darknetserver_2eproto::InitDefaultsDetectedObjects();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:darknetServer.DetectedObjects)
}
DetectedObjects::DetectedObjects(const DetectedObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prob_(from.prob_),
      mask_(from.mask_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bbox()) {
    bbox_ = new ::darknetServer::DetectedObjects_box(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&classes_, &from.classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_class_) -
    reinterpret_cast<char*>(&classes_)) + sizeof(sort_class_));
  // @@protoc_insertion_point(copy_constructor:darknetServer.DetectedObjects)
}

void DetectedObjects::SharedCtor() {
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_class_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(sort_class_));
  _cached_size_ = 0;
}

DetectedObjects::~DetectedObjects() {
  // @@protoc_insertion_point(destructor:darknetServer.DetectedObjects)
  SharedDtor();
}

void DetectedObjects::SharedDtor() {
  if (this != internal_default_instance()) delete bbox_;
}

void DetectedObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedObjects::descriptor() {
  ::protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedObjects& DetectedObjects::default_instance() {
  ::protobuf_darknetserver_2eproto::InitDefaultsDetectedObjects();
  return *internal_default_instance();
}

DetectedObjects* DetectedObjects::New(::google::protobuf::Arena* arena) const {
  DetectedObjects* n = new DetectedObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:darknetServer.DetectedObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prob_.Clear();
  mask_.Clear();
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&classes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_class_) -
      reinterpret_cast<char*>(&classes_)) + sizeof(sort_class_));
  _internal_metadata_.Clear();
}

bool DetectedObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:darknetServer.DetectedObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .darknetServer.DetectedObjects.box bbox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 classes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_prob())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_prob())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mask())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_mask())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float objectness = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &objectness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort_class = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:darknetServer.DetectedObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:darknetServer.DetectedObjects)
  return false;
#undef DO_
}

void DetectedObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:darknetServer.DetectedObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .darknetServer.DetectedObjects.box bbox = 1;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bbox_, output);
  }

  // int32 classes = 2;
  if (this->classes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->classes(), output);
  }

  // repeated float prob = 3;
  if (this->prob_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _prob_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->prob().data(), this->prob_size(), output);
  }

  // repeated float mask = 4;
  if (this->mask_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mask_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mask().data(), this->mask_size(), output);
  }

  // float objectness = 5;
  if (this->objectness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->objectness(), output);
  }

  // int32 sort_class = 6;
  if (this->sort_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sort_class(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:darknetServer.DetectedObjects)
}

::google::protobuf::uint8* DetectedObjects::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:darknetServer.DetectedObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .darknetServer.DetectedObjects.box bbox = 1;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->bbox_, deterministic, target);
  }

  // int32 classes = 2;
  if (this->classes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->classes(), target);
  }

  // repeated float prob = 3;
  if (this->prob_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _prob_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->prob_, target);
  }

  // repeated float mask = 4;
  if (this->mask_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mask_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mask_, target);
  }

  // float objectness = 5;
  if (this->objectness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->objectness(), target);
  }

  // int32 sort_class = 6;
  if (this->sort_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sort_class(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:darknetServer.DetectedObjects)
  return target;
}

size_t DetectedObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:darknetServer.DetectedObjects)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float prob = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->prob_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _prob_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mask = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mask_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mask_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .darknetServer.DetectedObjects.box bbox = 1;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // int32 classes = 2;
  if (this->classes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->classes());
  }

  // float objectness = 5;
  if (this->objectness() != 0) {
    total_size += 1 + 4;
  }

  // int32 sort_class = 6;
  if (this->sort_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sort_class());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:darknetServer.DetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedObjects* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedObjects>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:darknetServer.DetectedObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:darknetServer.DetectedObjects)
    MergeFrom(*source);
  }
}

void DetectedObjects::MergeFrom(const DetectedObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:darknetServer.DetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prob_.MergeFrom(from.prob_);
  mask_.MergeFrom(from.mask_);
  if (from.has_bbox()) {
    mutable_bbox()->::darknetServer::DetectedObjects_box::MergeFrom(from.bbox());
  }
  if (from.classes() != 0) {
    set_classes(from.classes());
  }
  if (from.objectness() != 0) {
    set_objectness(from.objectness());
  }
  if (from.sort_class() != 0) {
    set_sort_class(from.sort_class());
  }
}

void DetectedObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:darknetServer.DetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedObjects::CopyFrom(const DetectedObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:darknetServer.DetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedObjects::IsInitialized() const {
  return true;
}

void DetectedObjects::Swap(DetectedObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedObjects::InternalSwap(DetectedObjects* other) {
  using std::swap;
  prob_.InternalSwap(&other->prob_);
  mask_.InternalSwap(&other->mask_);
  swap(bbox_, other->bbox_);
  swap(classes_, other->classes_);
  swap(objectness_, other->objectness_);
  swap(sort_class_, other->sort_class_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedObjects::GetMetadata() const {
  protobuf_darknetserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_darknetserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace darknetServer

// @@protoc_insertion_point(global_scope)
