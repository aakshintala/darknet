// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: darknetserver.proto

#include "darknetserver.pb.h"
#include "darknetserver.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace darknetServer {

static const char* ImageDetection_method_names[] = {
  "/darknetServer.ImageDetection/RequestDetection",
};

std::unique_ptr< ImageDetection::Stub> ImageDetection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageDetection::Stub> stub(new ImageDetection::Stub(channel));
  return stub;
}

ImageDetection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestDetection_(ImageDetection_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::darknetServer::DetectedObjects>* ImageDetection::Stub::RequestDetectionRaw(::grpc::ClientContext* context, const ::darknetServer::KeyFrame& request) {
  return ::grpc::internal::ClientReaderFactory< ::darknetServer::DetectedObjects>::Create(channel_.get(), rpcmethod_RequestDetection_, context, request);
}

::grpc::ClientAsyncReader< ::darknetServer::DetectedObjects>* ImageDetection::Stub::AsyncRequestDetectionRaw(::grpc::ClientContext* context, const ::darknetServer::KeyFrame& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::darknetServer::DetectedObjects>::Create(channel_.get(), cq, rpcmethod_RequestDetection_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::darknetServer::DetectedObjects>* ImageDetection::Stub::PrepareAsyncRequestDetectionRaw(::grpc::ClientContext* context, const ::darknetServer::KeyFrame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::darknetServer::DetectedObjects>::Create(channel_.get(), cq, rpcmethod_RequestDetection_, context, request, false, nullptr);
}

ImageDetection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageDetection_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ImageDetection::Service, ::darknetServer::KeyFrame, ::darknetServer::DetectedObjects>(
          std::mem_fn(&ImageDetection::Service::RequestDetection), this)));
}

ImageDetection::Service::~Service() {
}

::grpc::Status ImageDetection::Service::RequestDetection(::grpc::ServerContext* context, const ::darknetServer::KeyFrame* request, ::grpc::ServerWriter< ::darknetServer::DetectedObjects>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace darknetServer

